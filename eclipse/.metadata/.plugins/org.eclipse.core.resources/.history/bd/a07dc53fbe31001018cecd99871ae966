package n11client.gui.hud;

import net.minecraft.client.Minecraft;
import net.minecraft.client.gui.GuiButton;
import net.minecraft.client.gui.GuiScreen;
import net.minecraft.client.gui.GuiSlot;
import net.minecraft.client.renderer.GlStateManager;
import net.minecraft.client.renderer.RenderHelper;
import net.minecraft.client.renderer.entity.ArmorStandRenderer;
import net.minecraft.client.renderer.entity.RenderItem;
import net.minecraft.init.Blocks;
import net.minecraft.init.Items;
import net.minecraft.item.Item;
import net.minecraft.item.ItemPotion;
import net.minecraft.item.ItemStack;

import org.lwjgl.input.Keyboard;
import org.lwjgl.input.Mouse;

import n11client.mods.armorstatus.ModArmorStatus;
import n11client.mods.clock.Clock;
import n11client.mods.clock.ClockSettings;
import n11client.mods.cps.CPS;
import n11client.mods.fps.ModFPS;
import n11client.mods.keystrokes.ModKeystrokes;
import n11client.mods.togglesprintsneak.ModToggleSprintSneak;

import java.awt.ItemSelectable;
import java.io.IOException;
import java.util.ArrayList;
import java.util.List;

public class ModView extends GuiScreen {
	private ModListView md;
	private String ModName;
	public ModView(ModListView md, String ModName) {
		this.md = md;
		this.ModName = ModName;
	}
    private ScrollList scrollList;
    private List<String> entries = new ArrayList<>();

    @Override
    public void initGui() {
        super.initGui();
        entries.clear();
        
        scrollList = new ScrollList();
    }

    @Override
    public void handleMouseInput() throws IOException {
        super.handleMouseInput();
        int scrollAmount = Mouse.getEventDWheel();
        if (scrollAmount != 0) {
            if (scrollAmount > 0) scrollAmount = -1;
            else if (scrollAmount < 0) scrollAmount = 1;
            scrollList.scrollBy(scrollAmount * 20);
        }
    }

    @Override
    protected void actionPerformed(GuiButton button) throws IOException {
        if (button.displayString.equals("Disable") || button.displayString.equals("Enable")) {
			md.manager.getRegisteredRenderers().forEach(renderer -> {
				if (renderer instanceof ModArmorStatus && ModName.equals("Armor Status")) {
					ModArmorStatus armorStatus = (ModArmorStatus) renderer;
					if (button.displayString.equals("Disable")) {
						armorStatus.setEnabled(false);
					} else {
						armorStatus.setEnabled(true);
					}
				} else if (renderer instanceof Clock && ModName.equals("Clock")) {
					Clock clock = (Clock) renderer;
					if (button.displayString.equals("Disable")) {
						clock.setEnabled(false);
					} else {
						clock.setEnabled(true);
					}
				} else if (renderer instanceof CPS && ModName.equals("CPS")) {
					CPS cps = (CPS) renderer;
					if (button.displayString.equals("Disable")) {
						cps.setEnabled(false);
					} else {
						cps.setEnabled(true);
					}
				} else if (renderer instanceof ModKeystrokes && ModName.equals("Keystrokes")) {
					ModKeystrokes keystrokes = (ModKeystrokes) renderer;
					if (button.displayString.equals("Disable")) {
						keystrokes.setEnabled(false);
					} else {
						keystrokes.setEnabled(true);
					}
				} else if (renderer instanceof ModToggleSprintSneak && ModName.equals("Toggle Sprint/Sneak")) {
					ModToggleSprintSneak toggle = (ModToggleSprintSneak) renderer;
					if (button.displayString.equals("Disable")) {
						toggle.setEnabled(false);
					} else {
						toggle.setEnabled(true);
					}
				} else if (renderer instanceof ModFPS && ModName.equals("FPS")) {
					ModFPS fps = (ModFPS) renderer;
					if (button.displayString.equals("Disable")) {
						fps.setEnabled(false);
					} else {
						fps.setEnabled(true);
					}
				}
			});
        }
    }


    @Override
    public void drawScreen(int mouseX, int mouseY, float partialTicks) {
        super.drawDefaultBackground();
        scrollList.drawScreenNoDirt(mouseX, mouseY, partialTicks);
        drawString(mc.fontRendererObj, ModName, 15, 14, 0xFFFFFF);
        // Draw a button on the top right corner using button list
        this.buttonList.clear();

        

        md.manager.getRegisteredRenderers().forEach(renderer -> {
			if (renderer instanceof ModArmorStatus && ModName.equals("Armor Status")) {
				ModArmorStatus armorStatus = (ModArmorStatus) renderer;
				if (armorStatus.isEnabled()) {
					this.buttonList.add(new GuiButton(0, this.width - 65, 10, 50, 20, "Disable"));
				} else {
					this.buttonList.add(new GuiButton(1, this.width - 65, 10, 50, 20, "Enable"));
				}
				// Enable durability
				drawString(mc.fontRendererObj, "Show the durability bar:", 15, 56, 0xFFFFFF);
				if (armorStatus.isShowingDurability) {
					this.buttonList.add(new GuiButton(2, this.width - 90, 60, 75, 20, "Disable"));
				} else {
					this.buttonList.add(new GuiButton(3, this.width - 90, 60, 75, 20, "Enable"));
				}
				// Enable durability
				drawString(mc.fontRendererObj, "Show the durability value:", 15, 90, 0xFFFFFF);
				if (armorStatus.isShowingDurability) {
					this.buttonList.add(new GuiButton(2, this.width - 90, 85, 75, 20, "Disable"));
				} else {
					this.buttonList.add(new GuiButton(3, this.width - 90, 85, 75, 20, "Enable"));
				}
			} else if (renderer instanceof Clock && ModName.equals("Clock")) {
				Clock clock = (Clock) renderer;
				if (clock.isEnabled()) {
					this.buttonList.add(new GuiButton(0, this.width - 65, 10, 50, 20, "Disable"));
				} else {
					this.buttonList.add(new GuiButton(1, this.width - 65, 10, 50, 20, "Enable"));
				}
			} else if (renderer instanceof CPS && ModName.equals("CPS")) {
				CPS cps = (CPS) renderer;
				if (cps.isEnabled()) {
					this.buttonList.add(new GuiButton(0, this.width - 65, 10, 50, 20, "Disable"));
				} else {
					this.buttonList.add(new GuiButton(1, this.width - 65, 10, 50, 20, "Enable"));
				}
			} else if (renderer instanceof ModKeystrokes && ModName.equals("Keystrokes")) {
				ModKeystrokes keystrokes = (ModKeystrokes) renderer;
				if (keystrokes.isEnabled()) {
					this.buttonList.add(new GuiButton(0, this.width - 65, 10, 50, 20, "Disable"));
				} else {
					this.buttonList.add(new GuiButton(1, this.width - 65, 10, 50, 20, "Enable"));
				}
			} else if (renderer instanceof ModToggleSprintSneak && ModName.equals("Toggle Sprint/Sneak")) {
				ModToggleSprintSneak toggle = (ModToggleSprintSneak) renderer;
				if (toggle.isEnabled()) {
					this.buttonList.add(new GuiButton(0, this.width - 65, 10, 50, 20, "Disable"));
				} else {
					this.buttonList.add(new GuiButton(1, this.width - 65, 10, 50, 20, "Enable"));
				}
			} else if (renderer instanceof ModFPS && ModName.equals("FPS")) {
				ModFPS fps = (ModFPS) renderer;
				if (fps.isEnabled()) {
					this.buttonList.add(new GuiButton(0, this.width - 65, 10, 50, 20, "Disable"));
				} else {
					this.buttonList.add(new GuiButton(1, this.width - 65, 10, 50, 20, "Enable"));
				}
			}
		});
        
        super.drawScreen(mouseX, mouseY, partialTicks);
    }

    @Override
    protected void keyTyped(char typedChar, int keyCode) throws IOException {
        if (keyCode == Keyboard.KEY_ESCAPE) {
            mc.displayGuiScreen(md);
            return;
        }
        super.keyTyped(typedChar, keyCode);
    }

    @Override
    protected void mouseClicked(int mouseX, int mouseY, int mouseButton) throws IOException {
        super.mouseClicked(mouseX, mouseY, mouseButton);
        int clickedIndex = scrollList.getSlotIndexFromScreenCoords(mouseX, mouseY);
        if (clickedIndex >= 0) {
            scrollList.elementClicked(clickedIndex, false, mouseX, mouseY);
        }
    }

    private class ScrollList extends GuiSlot {

        public ScrollList() {
            super(ModView.this.mc, ModView.this.width, ModView.this.height, 32, ModView.this.height, 20);
        }

        @Override
        protected int getSize() {
            return entries.size();
        }

        @Override
        protected void elementClicked(int index, boolean doubleClick, int mouseX, int mouseY) {
            System.out.println("Clicked: " + entries.get(index));
        }

        @Override
        protected boolean isSelected(int index) {
            return false;
        }

        @Override
        protected void drawBackground() {}

        @Override
        protected void drawSlot(int index, int x, int y, int height, int mouseX, int mouseY) {

        }
    }

    @Override
    public boolean doesGuiPauseGame() {
        return true;
    }
}
