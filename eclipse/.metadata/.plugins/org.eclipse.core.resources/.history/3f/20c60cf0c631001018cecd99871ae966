package n11client.gui.hud;

import net.minecraft.client.Minecraft;
import net.minecraft.client.gui.GuiButton;
import net.minecraft.client.gui.GuiScreen;
import net.minecraft.client.gui.GuiSlot;
import net.minecraft.client.gui.GuiTextField;
import net.minecraft.client.renderer.GlStateManager;
import net.minecraft.client.renderer.RenderHelper;
import net.minecraft.client.renderer.entity.ArmorStandRenderer;
import net.minecraft.client.renderer.entity.RenderItem;
import net.minecraft.init.Blocks;
import net.minecraft.init.Items;
import net.minecraft.item.Item;
import net.minecraft.item.ItemPotion;
import net.minecraft.item.ItemStack;

import org.lwjgl.input.Keyboard;
import org.lwjgl.input.Mouse;

import n11client.mods.armorstatus.ModArmorStatus;
import n11client.mods.clock.Clock;
import n11client.mods.clock.ClockSettings;
import n11client.mods.cps.CPS;
import n11client.mods.fps.ModFPS;
import n11client.mods.keystrokes.ModKeystrokes;
import n11client.mods.togglesprintsneak.ModToggleSprintSneak;

import java.awt.ItemSelectable;
import java.io.IOException;
import java.util.ArrayList;
import java.util.List;

public class ModView extends GuiScreen {
	private ModListView md;
	private String ModName;
	public ModView(ModListView md, String ModName) {
		this.md = md;
		this.ModName = ModName;
	}
    private ScrollList scrollList;
    private List<String> entries = new ArrayList<>();

    private GuiTextField hex;
    
    @Override
    public void initGui() {
        super.initGui();
        entries.clear();
        md.manager.getRegisteredRenderers().forEach(renderer -> {
			if (renderer instanceof ModArmorStatus && ModName.equals("Armor Status")) {
				ModArmorStatus armorStatus = (ModArmorStatus) renderer;
				if (armorStatus.isEnabled()) {
					this.buttonList.add(new GuiButton(0, this.width - 65, 10, 50, 20, "Disable"));
				} else {
					this.buttonList.add(new GuiButton(1, this.width - 65, 10, 50, 20, "Enable"));
				}
				// Enable durability
				drawString(mc.fontRendererObj, "Show the durability bar:", 15, 65, 0xFFFFFF);
				if (armorStatus.isShowingDurability) {
					this.buttonList.add(new GuiButton(2, this.width - 90, 60, 75, 20, "Disable"));
				} else {
					this.buttonList.add(new GuiButton(3, this.width - 90, 60, 75, 20, "Enable"));
				}
				// Enable durability value
				drawString(mc.fontRendererObj, "Show the durability value:", 15, 90, 0xFFFFFF);
				if (armorStatus.isShowingDurabilityText) {
					this.buttonList.add(new GuiButton(4, this.width - 90, 85, 75, 20, "Disable"));
				} else {
					this.buttonList.add(new GuiButton(5, this.width - 90, 85, 75, 20, "Enable"));
				}
				// Enable direction
				drawString(mc.fontRendererObj, "Direction:", 15, 115, 0xFFFFFF);
				if (armorStatus.isVertical) {
					this.buttonList.add(new GuiButton(6, this.width - 90, 110, 75, 20, "Vertical"));
				} else {
					this.buttonList.add(new GuiButton(7, this.width - 90, 110, 75, 20, "Horizontal"));
				}
				// Enable alignment
				drawString(mc.fontRendererObj, "Alignment:", 15, 140, 0xFFFFFF);
				if (!armorStatus.isRightAligned) {
					this.buttonList.add(new GuiButton(8, this.width - 90, 135, 75, 20, "Left"));
				} else {
					this.buttonList.add(new GuiButton(9, this.width - 90, 135, 75, 20, "Right"));
				}
				// Enable alignment
				drawString(mc.fontRendererObj, "Item Count:", 15, 165, 0xFFFFFF);
				if (!armorStatus.showItemCount) {
					this.buttonList.add(new GuiButton(10, this.width - 90, 160, 75, 20, "Enable"));
				} else {
					this.buttonList.add(new GuiButton(11, this.width - 90, 160, 75, 20, "Disable"));
				}
				
				// Hex Color Picker
				drawString(mc.fontRendererObj, "Hex Color:", 15, 190, 0xFFFFFF);
				// add input box for hex color
				hex = new GuiTextField(1, this.mc.fontRendererObj, this.width - 90, 185, 75, 20);
				String hexColor = String.format("#%02x%02x%02x", armorStatus.getSettings().red, armorStatus.getSettings().green, armorStatus.getSettings().blue);
				hex.setText(hexColor);
				hex.setMaxStringLength(7); // Hex color format: #RRGGBB
			    hex.setFocused(false);
			} else if (renderer instanceof Clock && ModName.equals("Clock")) {
				Clock clock = (Clock) renderer;
				if (clock.isEnabled()) {
					this.buttonList.add(new GuiButton(0, this.width - 65, 10, 50, 20, "Disable"));
				} else {
					this.buttonList.add(new GuiButton(1, this.width - 65, 10, 50, 20, "Enable"));
				}
				// Enable 24 hour format
				if (clock.getSettings().hr24) {
					this.buttonList.add(new GuiButton(2, this.width - 90, 60, 75, 20, "Disable"));
				} else {
					this.buttonList.add(new GuiButton(3, this.width - 90, 60, 75, 20, "Enable"));
				}

				hex = new GuiTextField(1, this.mc.fontRendererObj, this.width - 90, 85, 75, 20);
				String hexColor = String.format("#%02x%02x%02x", clock.getSettings().red, clock.getSettings().green, clock.getSettings().blue);
				hex.setText(hexColor);
				hex.setMaxStringLength(7); // Hex color format: #RRGGBB
			    hex.setFocused(false);
			} else if (renderer instanceof CPS && ModName.equals("CPS")) {
				CPS cps = (CPS) renderer;
				if (cps.isEnabled()) {
					this.buttonList.add(new GuiButton(0, this.width - 65, 10, 50, 20, "Disable"));
				} else {
					this.buttonList.add(new GuiButton(1, this.width - 65, 10, 50, 20, "Enable"));
				}
				// left
				if (cps.getSettings().left) {
					this.buttonList.add(new GuiButton(2, this.width - 90, 60, 75, 20, "Disable"));
				} else {
					this.buttonList.add(new GuiButton(3, this.width - 90, 60, 75, 20, "Enable"));
				}
				// right
				if (cps.getSettings().right) {
					this.buttonList.add(new GuiButton(4, this.width - 90, 85, 75, 20, "Disable"));
				} else {
					this.buttonList.add(new GuiButton(5, this.width - 90, 85, 75, 20, "Enable"));
				}
				hex = new GuiTextField(1, this.mc.fontRendererObj, this.width - 90, 110, 75, 20);
				String hexColor = String.format("#%02x%02x%02x", cps.getSettings().red, cps.getSettings().green, cps.getSettings().blue);
				hex.setText(hexColor);
				hex.setMaxStringLength(7); // Hex color format: #RRGGBB
			    hex.setFocused(false);
			} else if (renderer instanceof ModKeystrokes && ModName.equals("Keystrokes")) {
				ModKeystrokes keystrokes = (ModKeystrokes) renderer;
				if (keystrokes.isEnabled()) {
					this.buttonList.add(new GuiButton(0, this.width - 65, 10, 50, 20, "Disable"));
				} else {
					this.buttonList.add(new GuiButton(1, this.width - 65, 10, 50, 20, "Enable"));
				}
			} else if (renderer instanceof ModToggleSprintSneak && ModName.equals("Toggle Sprint/Sneak")) {
				ModToggleSprintSneak toggle = (ModToggleSprintSneak) renderer;
				if (toggle.isEnabled()) {
					this.buttonList.add(new GuiButton(0, this.width - 65, 10, 50, 20, "Disable"));
				} else {
					this.buttonList.add(new GuiButton(1, this.width - 65, 10, 50, 20, "Enable"));
				}
			} else if (renderer instanceof ModFPS && ModName.equals("FPS")) {
				ModFPS fps = (ModFPS) renderer;
				if (fps.isEnabled()) {
					this.buttonList.add(new GuiButton(0, this.width - 65, 10, 50, 20, "Disable"));
				} else {
					this.buttonList.add(new GuiButton(1, this.width - 65, 10, 50, 20, "Enable"));
				}
			}
		});
        scrollList = new ScrollList();
    }

    @Override
    public void handleMouseInput() throws IOException {
        super.handleMouseInput();
        int scrollAmount = Mouse.getEventDWheel();
        if (scrollAmount != 0) {
            if (scrollAmount > 0) scrollAmount = -1;
            else if (scrollAmount < 0) scrollAmount = 1;
            scrollList.scrollBy(scrollAmount * 20);
        }
    }

    @Override
    protected void actionPerformed(GuiButton button) throws IOException {
			md.manager.getRegisteredRenderers().forEach(renderer -> {
				if (renderer instanceof ModArmorStatus && ModName.equals("Armor Status")) {
					ModArmorStatus armorStatus = (ModArmorStatus) renderer;
		        	System.out.println("Button clicked: " + button.displayString);
					if (button.displayString.equals("Disable") && button.id == 0) {
						armorStatus.setEnabled(false);
						this.buttonList.remove(button);
						this.buttonList.add(new GuiButton(1, this.width - 65, 10, 50, 20, "Enable"));
					} else if (button.id == 1) {
						armorStatus.setEnabled(true);
						this.buttonList.remove(button);
						this.buttonList.add(new GuiButton(0, this.width - 65, 10, 50, 20, "Disable"));
					}
					// Enable durability
					if (button.displayString.equals("Disable") && button.id == 2) {
						armorStatus.isShowingDurability = false;
						this.buttonList.remove(button);
						this.buttonList.add(new GuiButton(3, this.width - 90, 60, 75, 20, "Enable"));
					} else if (button.id == 3) {
						armorStatus.isShowingDurability = true;
						this.buttonList.remove(button);
						this.buttonList.add(new GuiButton(2, this.width - 90, 60, 75, 20, "Disable"));
					}
					// Enable durability value
					if (button.displayString.equals("Disable") && button.id == 4) {
						armorStatus.isShowingDurabilityText = false;
						this.buttonList.remove(button);
						this.buttonList.add(new GuiButton(5, this.width - 90, 85, 75, 20, "Enable"));
					} else if (button.id == 5) {
						armorStatus.isShowingDurabilityText = true;
						this.buttonList.remove(button);
						this.buttonList.add(new GuiButton(4, this.width - 90, 85, 75, 20, "Disable"));
					}
					// Direction
					if (button.displayString.equals("Vertical") && button.id == 6) {
						armorStatus.isVertical = false;
						this.buttonList.remove(button);
						this.buttonList.add(new GuiButton(7, this.width - 90, 110, 75, 20, "Horizontal"));
					} else if (button.id == 7) {
						armorStatus.isVertical = true;
						this.buttonList.remove(button);
						this.buttonList.add(new GuiButton(6, this.width - 90, 110, 75, 20, "Vertical"));
					}
					// Alignment
					if (button.displayString.equals("Left") && button.id == 8) {
						armorStatus.isRightAligned = true;
						this.buttonList.remove(button);
						this.buttonList.add(new GuiButton(9, this.width - 90, 135, 75, 20, "Right"));
					} else if (button.id == 9) {
						armorStatus.isRightAligned = false;
						this.buttonList.remove(button);
						this.buttonList.add(new GuiButton(8, this.width - 90, 135, 75, 20, "Left"));
					}
					// Item Count
					if (button.displayString.equals("Enable") && button.id == 10) {
						armorStatus.showItemCount = true;
						this.buttonList.remove(button);
						this.buttonList.add(new GuiButton(11, this.width - 90, 160, 75, 20, "Disable"));
					} else if (button.id == 11) {
						armorStatus.showItemCount = false;
						this.buttonList.remove(button);
						this.buttonList.add(new GuiButton(10, this.width - 90, 160, 75, 20, "Enable"));
					}
				} else if (renderer instanceof Clock && ModName.equals("Clock")) {
					Clock clock = (Clock) renderer;
					if (button.displayString.equals("Disable") && button.id == 0) {
						clock.setEnabled(false);
						this.buttonList.remove(button);
						this.buttonList.add(new GuiButton(1, this.width - 65, 10, 50, 20, "Enable"));
					} else if (button.id == 1) {
						clock.setEnabled(true);
						this.buttonList.remove(button);
						this.buttonList.add(new GuiButton(0, this.width - 65, 10, 50, 20, "Disable"));
					}
					// Enable 24 hour format
					if (button.displayString.equals("Disable") && button.id == 2) {
						clock.getSettings().hr24 = false;
						clock.hr24 = false;
						this.buttonList.remove(button);
						this.buttonList.add(new GuiButton(3, this.width - 90, 60, 75, 20, "Enable"));
					} else if (button.id == 3) {
						clock.getSettings().hr24 = true;
						clock.hr24 = true;
						this.buttonList.remove(button);
						this.buttonList.add(new GuiButton(2, this.width - 90, 60, 75, 20, "Disable"));
					}
				} else if (renderer instanceof CPS && ModName.equals("CPS")) {
					CPS cps = (CPS) renderer;
					if (button.displayString.equals("Disable") && button.id == 0) {
						cps.setEnabled(false);
						this.buttonList.remove(button);
						this.buttonList.add(new GuiButton(1, this.width - 65, 10, 50, 20, "Enable"));
					} else if (button.id == 1) {
						cps.setEnabled(true);
						this.buttonList.remove(button);
						this.buttonList.add(new GuiButton(0, this.width - 65, 10, 50, 20, "Disable"));
					}
					// left
					if (button.displayString.equals("Disable") && button.id == 2) {
						cps.getSettings().left = false;
						this.buttonList.remove(button);
						this.buttonList.add(new GuiButton(3, this.width - 90, 60, 75, 20, "Enable"));
					} else if (button.id == 3) {
						cps.getSettings().left = true;
						this.buttonList.remove(button);
						this.buttonList.add(new GuiButton(2, this.width - 90, 60, 75, 20, "Disable"));
					}
					// right
					if (button.displayString.equals("Disable") && button.id == 4) {
						cps.getSettings().right = false;
						this.buttonList.remove(button);
						this.buttonList.add(new GuiButton(5, this.width - 90, 85, 75, 20, "Enable"));
					} else if (button.id == 5) {
						cps.getSettings().right = true;
						this.buttonList.remove(button);
						this.buttonList.add(new GuiButton(4, this.width - 90, 85, 75, 20, "Disable"));
					}
				} else if (renderer instanceof ModKeystrokes && ModName.equals("Keystrokes")) {
					ModKeystrokes keystrokes = (ModKeystrokes) renderer;
					if (button.displayString.equals("Disable")) {
						keystrokes.setEnabled(false);
					} else {
						keystrokes.setEnabled(true);
					}
				} else if (renderer instanceof ModToggleSprintSneak && ModName.equals("Toggle Sprint/Sneak")) {
					ModToggleSprintSneak toggle = (ModToggleSprintSneak) renderer;
					if (button.displayString.equals("Disable")) {
						toggle.setEnabled(false);
					} else {
						toggle.setEnabled(true);
					}
				} else if (renderer instanceof ModFPS && ModName.equals("FPS")) {
					ModFPS fps = (ModFPS) renderer;
					if (button.displayString.equals("Disable")) {
						fps.setEnabled(false);
					} else {
						fps.setEnabled(true);
					}
				}
			});
    }
    


    @Override
    public void drawScreen(int mouseX, int mouseY, float partialTicks) {
        super.drawDefaultBackground();
        scrollList.drawScreenNoDirt(mouseX, mouseY, partialTicks);
        drawString(mc.fontRendererObj, ModName, 15, 14, 0xFFFFFF);
        
        if (hex!=null)hex.drawTextBox();
        md.manager.getRegisteredRenderers().forEach(renderer -> {
			if (renderer instanceof ModArmorStatus && ModName.equals("Armor Status")) {
				ModArmorStatus armorStatus = (ModArmorStatus) renderer;
				drawString(mc.fontRendererObj, "Show the durability bar:", 15, 65, 0xFFFFFF);
				drawString(mc.fontRendererObj, "Show the durability value:", 15, 90, 0xFFFFFF);
				drawString(mc.fontRendererObj, "Direction:", 15, 115, 0xFFFFFF);
				drawString(mc.fontRendererObj, "Alignment:", 15, 140, 0xFFFFFF);
				drawString(mc.fontRendererObj, "Item Count:", 15, 165, 0xFFFFFF);
				drawString(mc.fontRendererObj, "Hex Color:", 15, 190, 0xFFFFFF);
			} else if (renderer instanceof Clock && ModName.equals("Clock")) {
				Clock clock = (Clock) renderer;
				drawString(mc.fontRendererObj, "24 Hour Format:", 15, 65, 0xFFFFFF);
				drawString(mc.fontRendererObj, "Hex Color:", 15, 90, 0xFFFFFF);
			} else if (renderer instanceof CPS && ModName.equals("CPS")) {
				CPS cps = (CPS) renderer;
				drawString(mc.fontRendererObj, "Left", 15, 65, 0xFFFFFF);
				drawString(mc.fontRendererObj, "Right", 15, 90, 0xFFFFFF);
				drawString(mc.fontRendererObj, "Hex Color:", 15, 115, 0xFFFFFF);
			} else if (renderer instanceof ModKeystrokes && ModName.equals("Keystrokes")) {
				ModKeystrokes keystrokes = (ModKeystrokes) renderer;
			} else if (renderer instanceof ModToggleSprintSneak && ModName.equals("Toggle Sprint/Sneak")) {
				ModToggleSprintSneak toggle = (ModToggleSprintSneak) renderer;
			} else if (renderer instanceof ModFPS && ModName.equals("FPS")) {
				ModFPS fps = (ModFPS) renderer;
			}
		});
        

        
        
        super.drawScreen(mouseX, mouseY, partialTicks);
    }

    @Override
    protected void keyTyped(char typedChar, int keyCode) throws IOException {
        if (keyCode == Keyboard.KEY_ESCAPE) {
            mc.displayGuiScreen(md);
            return;
        }

        // Update text field based on key input
        if (hex.isFocused()) {
            hex.textboxKeyTyped(typedChar, keyCode);
            
            // Validate and update color
            String inputColor = hex.getText();
            if (inputColor.matches("#[0-9A-Fa-f]{6}")) {
                int red = Integer.parseInt(inputColor.substring(1, 3), 16);
                int green = Integer.parseInt(inputColor.substring(3, 5), 16);
                int blue = Integer.parseInt(inputColor.substring(5, 7), 16);
                // Update armor status color (example)
                md.manager.getRegisteredRenderers().forEach(renderer -> {
                    if (renderer instanceof ModArmorStatus && ModName.equals("Armor Status")) {
                        ModArmorStatus armorStatus = (ModArmorStatus) renderer;
                        armorStatus.getSettings().red = red;
                        armorStatus.getSettings().green = green;
                        armorStatus.getSettings().blue = blue;
                    } else if (renderer instanceof Clock && ModName.equals("Clock")) {
						Clock clock = (Clock) renderer;
						clock.getSettings().red = red;
						clock.getSettings().green = green;
						clock.getSettings().blue = blue;
                    } else if (renderer instanceof CPS && ModName.equals("CPS")) {
						CPS cps = (CPS) renderer;
						cps.getSettings().red = red;
						cps.getSettings().green = green;
						cps.getSettings().blue = blue;
                    } else if (renderer instanceof ModFPS && ModName.equals("FPS")) {
                    	ModFPS cps = (ModFPS) renderer;
						cps.getSettings().red = red;
						cps.getSettings().green = green;
						cps.getSettings().blue = blue;
					}
                });
            }
        }
        super.keyTyped(typedChar, keyCode);
    }

    @Override
    protected void mouseClicked(int mouseX, int mouseY, int mouseButton) throws IOException {
        super.mouseClicked(mouseX, mouseY, mouseButton);
        int clickedIndex = scrollList.getSlotIndexFromScreenCoords(mouseX, mouseY);
        if (clickedIndex >= 0) {
            scrollList.elementClicked(clickedIndex, false, mouseX, mouseY);
        }
        if (hex!=null)hex.mouseClicked(mouseX, mouseY, mouseButton);
    }

    private class ScrollList extends GuiSlot {

        public ScrollList() {
            super(ModView.this.mc, ModView.this.width, ModView.this.height, 32, ModView.this.height, 20);
        }

        @Override
        protected int getSize() {
            return entries.size();
        }

        @Override
        protected void elementClicked(int index, boolean doubleClick, int mouseX, int mouseY) {
            System.out.println("Clicked: " + entries.get(index));
        }

        @Override
        protected boolean isSelected(int index) {
            return false;
        }

        @Override
        protected void drawBackground() {}

        @Override
        protected void drawSlot(int index, int x, int y, int height, int mouseX, int mouseY) {

        }
    }

    @Override
    public boolean doesGuiPauseGame() {
        return true;
    }
}
